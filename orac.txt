prac1
1. Create the student Table with Range Partitioning:
Design a table named student with the following columns:
s_id (integer) – student ID
s_name (varchar of 20 characters) – student name
dob (date) – date of birth
Partition this table based on the year of birth (dob) using range partitions:
p0: Includes students born before 1990.
p1: Includes students born between 1990 and 1994.
p2: Includes students born between 1995 and 1999.

create table student(s_id int, s_name varchar(20), dob date)partition by range(year(dob))(partition p0 values less than (1990),partition p1 values less than(1995),partition p2 values less than (2000));

insert into student values(2,'ajay','1998-10-20'),(3,'sumit','1989-9-14'),(4,'vijay','1988-04-21'),(5,'joshna','1999-04-24'),(6,'ankita','1994-04-23');


2. Design a table named stores with the following columns:
shop_id (integer) – store shop ID
s_name (varchar of 20 characters) – store name
st_number (integer) – store contact number
email_id (varchar of 40 characters) – store email
store_id (integer) – unique store identifier

Partition this table based on the store_id using list partitions:
peast: Includes store IDs 104, 106, and 109.
pwest: Includes store IDs 103, 105, and 107.
pnorth: Includes store IDs 101, 102, and 108.
psouth: Includes store IDs 110, 111, and 112.

Solution:

create table stores(shop_id int, s_name varchar(20),st_number int,email_id varchar(40),store_id int) partition by list(store_id)
(partition peast values in(104,106,109),
partition pwest values in(103,105,107),
partition pnorth values in(101,102,108),
partition psouth values in(110,111,112));


Eg
insert into stores values(1,'pune_stores',2937363,'pn@gmail.com',104);

3. Fire the following Queries:
Solution:
1. Retrieve all records from the student table that belong to partition p1.
select * from student partition(p1);

2. Write a query to count the number of rows in each partition of the student table. The result should show partition_name and table_rows for each partition.
select partition_name,table_rows from information_schema.partitions where table_name='student';


prac2
Implementation of Analytical queries like Roll_UP, CUBE, First,
Last, Rank AND Dense Rank using oracle
--for formating purpose only--
set lines 256
set trimout on
set tab off

CREATE TABLE employees (
    employee_id NUMBER,
    ename VARCHAR2(50),
    department VARCHAR2(50),
    job VARCHAR2(50),
    salary NUMBER,
    hire_date DATE
);




Create a Partitioned Table (for ROLLUP and CUBE):

CREATE TABLE partitioned_employees (
    employee_id NUMBER,
    ename VARCHAR2(50),
    department VARCHAR2(50),
    job VARCHAR2(50),
    salary NUMBER,
    hire_date DATE
)
PARTITION BY RANGE (hire_date) (
    PARTITION emp_hiredate_jan2020 VALUES LESS THAN (TO_DATE('2020-02-01', 'YYYY-MM-DD')),
    PARTITION emp_hiredate_feb2020 VALUES LESS THAN (TO_DATE('2020-03-01', 'YYYY-MM-DD')),
    PARTITION emp_hiredate_mar2020 VALUES LESS THAN (TO_DATE('2020-04-01', 'YYYY-MM-DD')),
    -- Add more partitions as needed
    PARTITION emp_hiredate_default VALUES LESS THAN (MAXVALUE)
);

Create a Partitioned Table (for RANK and DENSE_RANK):

CREATE TABLE partitioned_employees_rank (
    employee_id NUMBER,
    ename VARCHAR2(50),
    department VARCHAR2(50),
    job VARCHAR2(50),
    salary NUMBER,
    hire_date DATE
)
PARTITION BY LIST (department) (
    PARTITION emp_it VALUES ('IT'),
    PARTITION emp_hr VALUES ('HR'),
    PARTITION emp_sales VALUES ('Sales'),
    -- Add more partitions as needed
    PARTITION emp_other VALUES (DEFAULT)
);



INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (1, 'John Doe', 'IT', 'Programmer', 80000, TO_DATE('2020-01-15', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (2, 'Jane Smith', 'HR', 'HR Manager', 90000, TO_DATE('2019-12-10', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (3, 'Bob Johnson', 'Sales', 'Sales Associate', 75000, TO_DATE('2020-02-20', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (4, 'Alice Brown', 'IT', 'Database Administrator', 85000, TO_DATE('2020-03-05', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (5, 'Eva Green', 'HR', 'HR Coordinator', 70000, TO_DATE('2020-02-01', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (6, 'David Lee', 'Sales', 'Sales Manager', 95000, TO_DATE('2020-01-20', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (7, 'Grace Turner', 'IT', 'Programmer', 82000, TO_DATE('2020-02-25', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (8, 'Michael White', 'HR', 'HR Manager', 92000, TO_DATE('2020-03-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (9, 'Linda Davis', 'Sales', 'Sales Associate', 78000, TO_DATE('2019-12-05', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (10, 'Tom Clark', 'IT', 'Database Administrator', 89000, TO_DATE('2020-01-10', 'YYYY-MM-DD'));



-- Insert into January 2020 partition
INSERT INTO partitioned_employees
PARTITION (emp_hiredate_jan2020)
(employee_id, ename, department, job, salary, hire_date)
VALUES (11, 'Mark Johnson', 'IT', 'Programmer', 81000, TO_DATE('2020-01-25', 'YYYY-MM-DD'));

-- Insert into February 2020 partition
INSERT INTO partitioned_employees
PARTITION (emp_hiredate_feb2020)
(employee_id, ename, department, job, salary, hire_date)
VALUES (12, 'Sarah Adams', 'Sales', 'Sales Associate', 76000, TO_DATE('2020-02-15', 'YYYY-MM-DD'));

-- Continue inserting into other partitions as needed


-- Insert into IT partition
INSERT INTO partitioned_employees_rank PARTITION (emp_it)
(employee_id, ename, department, job, salary, hire_date)
VALUES (13, 'Chris Martin', 'IT', 'Programmer', 83000, TO_DATE('2020-03-15', 'YYYY-MM-DD'));

-- Insert into HR partition
INSERT INTO partitioned_employees_rank PARTITION (emp_hr)
(employee_id, ename, department, job, salary, hire_date)
VALUES (14, 'Anna Wilson', 'HR', 'HR Manager', 91000, TO_DATE('2020-01-05', 'YYYY-MM-DD'));

-- Continue inserting into other partitions as needed



-- ROLLUP example
SELECT department, job, SUM(salary) AS total_salary
FROM employees
GROUP BY ROLLUP (department, job);

-- CUBE example
SELECT department, job, SUM(salary) AS total_salary
FROM employees
GROUP BY CUBE (department, job);



-- FIRST and LAST example
SELECT department, job, ename,
       FIRST_VALUE(salary) OVER(PARTITION BY department, job ORDER BY hire_date) AS first_salary,
       LAST_VALUE(salary) OVER(PARTITION BY department, job ORDER BY hire_date) AS last_salary
FROM employees;



-- RANK and DENSE_RANK example
SELECT department, job, ename, salary,
       RANK() OVER(PARTITION BY department, job ORDER BY salary DESC) AS rank,
       DENSE_RANK() OVER(PARTITION BY department, job ORDER BY salary DESC) AS dense_rank
FROM employees;

prac3
Practical no-3
Aim: Implementation of Abstract Data Type & Reference

1. Creating tables with ADT and References for customer, purchase order ,stock, lineitems table

a. Create tables:
CREATE TABLE Customer (
CustNo NUMBER NOT NULL,
CustName VARCHAR2(200) NOT NULL,
Street VARCHAR2(200) NOT NULL,
City VARCHAR2(200) NOT NULL,
State CHAR(2) NOT NULL,
Zip VARCHAR2(20) NOT NULL,
Phone1 VARCHAR2(20),
Phone2 VARCHAR2(20),
Phone3 VARCHAR2(20),
PRIMARY KEY (CustNo));

CREATE TABLE PurchaseOrder (
PONo NUMBER,
Custno NUMBER references Customer,
OrderDate DATE,
ShipDate DATE,
ToStreet VARCHAR2(200),
ToCity VARCHAR2(200),
ToState CHAR(2),
ToZip VARCHAR2(20),
PRIMARY KEY(PONo));

CREATE TABLE Stock (
StockNo NUMBER PRIMARY KEY,
Price NUMBER,
TaxRate NUMBER);

CREATE TABLE LineItems (
LineItemNo NUMBER,
PONo NUMBER REFERENCES PurchaseOrder,
StockNo NUMBER REFERENCES Stock,
Quantity NUMBER,
Discount NUMBER,
PRIMARY KEY (PONo, LineItemNo));


b. Inserting data into tables with ADT and references

INSERT INTO Stock VALUES(1004, 6750.00, 2);
INSERT INTO Stock VALUES(1011, 4500.23, 2);
INSERT INTO Stock VALUES(1534, 2234.00, 2);
INSERT INTO Stock VALUES(1535, 3456.23, 2);

INSERT INTO Customer VALUES (1, 'Jean Nance', '2 Avocet Drive','Redwood Shores', 'CA', '95054','415-555-1212', NULL, NULL);
INSERT INTO Customer VALUES (2, 'John Nike', '323 College Drive','Edison', 'NJ', '08820','609-555-1212', '201-555-1212', NULL);

INSERT INTO PurchaseOrder VALUES (1001, 1, SYSDATE, '10-MAY-1997',NULL, NULL, NULL, NULL);
INSERT INTO PurchaseOrder VALUES (2001, 2, SYSDATE, '20-MAY-1997','55 Madison Ave', 'Madison', 'WI', '53715');

INSERT INTO LineItems VALUES(01, 1001, 1534, 12, 0);
INSERT INTO LineItems VALUES(02, 1001, 1535, 10, 10);
INSERT INTO LineItems VALUES(01, 2001, 1004, 1, 0);
INSERT INTO LineItems VALUES(02, 2001, 1011, 2, 1);
INSERT INTO LineItems VALUES(01, 2001, 1534, 2, 1);


c. simple query on table
1. Getting all data from customer,purchaseorder and lineitems using simple join
SELECT C.CustNo, C.CustName, C.Street, C.City, C.State,
C.Zip, C.phone1, C.phone2, C.phone3,
P.PONo, P.OrderDate,
L.StockNo, L.LineItemNo, L.Quantity, L.Discount
FROM Customer C,
PurchaseOrder P,
LineItems L
WHERE C.CustNo = P.CustNo
AND P.PONo = L.PONo
AND P.PONo = 1001;



2. Get the Total Value of Purchase Orders
SELECT P.PONo, SUM(S.Price * L.Quantity)
FROM PurchaseOrder P,
LineItems L,
Stock S
WHERE P.PONo = L.PONo
AND L.StockNo = S.StockNo
GROUP BY P.PONo;


3. Get the Purchase Order and Line Item Data for Stock Item 1004
SELECT P.PONo, P.CustNo,
L.StockNo, L.LineItemNo, L.Quantity, L.Discount
FROM PurchaseOrder P,LineItems L
WHERE P.PONo = L.PONo
AND L.StockNo = 1004;

4. Updating Data Under the Relational Model. The application can execute statements like these to update the data:

UPDATE LineItems SET Quantity = 20 WHERE PONo = 1001 AND StockNo = 1534;


5. Deleting Data Under the Relational Model:

DELETE FROM LineItems WHERE PONo = 1001;
DELETE FROM PurchaseOrder WHERE PONo = 1001;




2. Create an ADT Credit_type for purchase_amt, credit_grade(A,B,C)
Create a table Customer_Rating with attributes Cust_id, Name, and Credits
1. Display name of all customers.
2. Display the credit_grade of the customer whose purchase amount is greater than
25000
3. Display all customers with ‘C’ credit_grade
4. Display only the Name of customers with ‘A’ and ‘B’ Credit_grade

solution :
Create the ADT Credit_type
CREATE TYPE Credit_type AS OBJECT (
    purchase_amt NUMBER,
    credit_grade CHAR(1)
);
/

Create the table Customer_Rating
CREATE TABLE Customer_Rating (
    Cust_id NUMBER PRIMARY KEY,
    Name VARCHAR2(50),
    Credits Credit_type
);

sample data
INSERT INTO Customer_Rating VALUES (1, 'vijay', Credit_type(30000, 'A'));
INSERT INTO Customer_Rating VALUES (2, 'ajay', Credit_type(20000, 'B'));
INSERT INTO Customer_Rating VALUES (3, 'muskaan', Credit_type(27000, 'C'));
INSERT INTO Customer_Rating VALUES (4, 'neel', Credit_type(18000, 'A'));

Display name of all customers
SELECT Name FROM Customer_Rating;

Display the credit_grade of the customer whose purchase amount is greater than 25000
SELECT c.Credits.credit_grade FROM Customer_Rating WHERE Credits.purchase_amt > 25000;

Display all customers with ‘C’ credit_grade
SELECT * FROM Customer_Rating c WHERE c.Credits.credit_grade = 'C';

Display only the Name of customers with ‘A’ and ‘B’ Credit_grade
SELECT Name FROM Customer_Rating c WHERE c.Credits.credit_grade IN ('A', 'B');